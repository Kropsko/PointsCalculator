// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PointsCalculator.Persistance;

namespace PointsCalculator.Persistance.Migrations
{
    [DbContext(typeof(PointsCalculatorContext))]
    partial class PointsCalculatorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("PointsCalculator.Domain.Action", b =>
                {
                    b.Property<int>("ActionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActionType");

                    b.Property<int>("GameplayId");

                    b.Property<int>("PlayerId");

                    b.Property<int>("Points");

                    b.HasKey("ActionId");

                    b.HasIndex("GameplayId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("PointsCalculator.Domain.Configuration", b =>
                {
                    b.Property<int>("ConfigurationId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Color");

                    b.Property<int>("GameplayID");

                    b.Property<int>("PlayerId");

                    b.HasKey("ConfigurationId");

                    b.HasIndex("GameplayID");

                    b.HasIndex("PlayerId");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("PointsCalculator.Domain.Gameplay", b =>
                {
                    b.Property<int>("GameplayId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("End");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsEnded");

                    b.Property<DateTime?>("Start");

                    b.HasKey("GameplayId");

                    b.ToTable("Gameplays");
                });

            modelBuilder.Entity("PointsCalculator.Domain.GameplayPlayer", b =>
                {
                    b.Property<int>("GameplayId");

                    b.Property<int>("PlayerId");

                    b.HasKey("GameplayId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GameplayPlayer");
                });

            modelBuilder.Entity("PointsCalculator.Domain.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateDate");

                    b.Property<DateTime?>("DeleteDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("PlayerId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("PointsCalculator.Domain.Action", b =>
                {
                    b.HasOne("PointsCalculator.Domain.Gameplay", "Gameplay")
                        .WithMany("Actions")
                        .HasForeignKey("GameplayId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PointsCalculator.Domain.Player", "Player")
                        .WithMany("Actions")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PointsCalculator.Domain.Configuration", b =>
                {
                    b.HasOne("PointsCalculator.Domain.Gameplay", "Gameplay")
                        .WithMany("Configurations")
                        .HasForeignKey("GameplayID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PointsCalculator.Domain.Player", "Player")
                        .WithMany("Configurations")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PointsCalculator.Domain.GameplayPlayer", b =>
                {
                    b.HasOne("PointsCalculator.Domain.Gameplay", "Gameplay")
                        .WithMany("Players")
                        .HasForeignKey("GameplayId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PointsCalculator.Domain.Player", "Player")
                        .WithMany("Gameplays")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
